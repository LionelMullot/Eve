#INCLUDE( MacroDefinitions )
INCLUDE( ExternalProject )


STRING( REGEX MATCH "^Visual Studio" GENERATOR_MATCH_VISUAL_STUDIO ${CMAKE_GENERATOR} )
STRING( REGEX MATCH "^NMake Makefiles$" GENERATOR_MATCH_NMAKE ${CMAKE_GENERATOR} )
IF( GENERATOR_MATCH_NMAKE )
	SET (NATIVE_PATCH_EXECUTABLE ${PROJECT_SOURCE_DIR}/CMake/tools/patch/bin/patch.exe)
	SET( PLATFORM_BUILD_COMMAND nmake )
	SET( PLATFORM_INSTALL_COMMAND nmake install )
	SET( CMISS_PATCH_EXECUTABLE ${CMISS_PATCH_EXECUTABLE} --binary )
ELSEIF( GENERATOR_MATCH_VISUAL_STUDIO )
	SET (NATIVE_PATCH_EXECUTABLE ${PROJECT_SOURCE_DIR}/CMake/tools/patch/bin/patch.exe)
	SET( PLATFORM_BUILD_COMMAND devenv /Build ${CMAKE_BUILD_TYPE} /Project all_build )
	SET( PLATFORM_INSTALL_COMMAND devenv /Build ${CMAKE_BUILD_TYPE} /Project install )
	SET( CMISS_PATCH_EXECUTABLE ${CMISS_PATCH_EXECUTABLE} --binary )
	#MESSAGE( FATAL_ERROR "Can't deal with this generator '${CMAKE_GENERATOR}' for the third party libraries, try using '-G NMake Makefiles'" )
ELSE( GENERATOR_MATCH_NMAKE )
	FIND_PROGRAM( NATIVE_PATCH_EXECUTABLE patch )
	MARK_AS_ADVANCED( NATIVE_PATCH_EXECUTABLE )
	SET( PLATFORM_BUILD_COMMAND make )
	SET( PLATFORM_INSTALL_COMMAND make install )
ENDIF( GENERATOR_MATCH_NMAKE )

MACRO( ADD_EXTERNAL_PROJECT PROJECT_NAME PROJECT_DEPENDS
	PROJECT_BASE PROJECT_DEST PROJECT_TGZ PROJECT_MD5_CHECKSUM PROJECT_PATCH_FILE PROJECT_CMAKE_FILE CONFIGURE_ARGS )

	SET( PROJECT_CONFIGURE_ARGS ${ARGN} )
	MESSAGE( STATUS "< ${PROJECT_NAME} : ${NATIVE_PATCH_EXECUTABLE} : ${PROJECT_DEPENDS} : ${PROJECT_TGZ} : ${PROJECT_PATCH_FILE} >" )
	MESSAGE( STATUS "${PROJECT_NAME}" )
	MESSAGE( "${PROJECT_CONFIGURE_ARGS}" )
	SET( PATCH_COMMAND_STRING )
	STRING( LENGTH "${PROJECT_PATCH_FILE}" PATCH_LENGTH )
	STRING( LENGTH "${PROJECT_CMAKE_FILE}" CMAKE_LENGTH )
	IF( PATCH_LENGTH GREATER 0 )
		SET( PATCH_COMMAND_STRING "PATCH_COMMAND;${NATIVE_PATCH_EXECUTABLE};-p1;-i;${PROJECT_BASE}/${PROJECT_PATCH_FILE}" )
	ELSEIF( CMAKE_LENGTH GREATER 0 )
		SET( PATCH_COMMAND_STRING "PATCH_COMMAND;${CMAKE_COMMAND};copy;${PROJECT_CMAKE_FILE};${CMAKE_CURRENT_BINARY_DIR}/src/${PROJECT_NAME}/CMakeLists.txt")
	MESSAGE(STATUS "configure ${PROJECT_CMAKE_FILE} ${CMAKE_CURRENT_BINARY_DIR}/src/${PROJECT_NAME}/CMakeLists.txt ")	
	ENDIF( PATCH_LENGTH GREATER 0 )
	# If we are builiding useing msbuild we need to add the name of the solution file to the build and install command
	SET( LOCAL_PLATFORM_BUILD_COMMAND ${PLATFORM_BUILD_COMMAND} )
	SET( LOCAL_PLATFORM_INSTALL_COMMAND ${PLATFORM_INSTALL_COMMAND} )
	IF( GENERATOR_MATCH_VISUAL_STUDIO )
		# opt++ is special, we have to replace the ++ with pp
		IF( ${PROJECT_NAME} STREQUAL "opt++" )
			LIST(APPEND LOCAL_PLATFORM_BUILD_COMMAND optpp_project.sln )
			LIST(APPEND LOCAL_PLATFORM_INSTALL_COMMAND optpp_project.sln )
		ELSE( ${PROJECT_NAME} STREQUAL "opt++" )
			LIST(APPEND LOCAL_PLATFORM_BUILD_COMMAND ${PROJECT_NAME}_project.sln )
			LIST(APPEND LOCAL_PLATFORM_INSTALL_COMMAND ${PROJECT_NAME}_project.sln )
		ENDIF( ${PROJECT_NAME} STREQUAL "opt++" )
			
		MESSAGE( "${PROJECT_NAME} - ${LOCAL_PLATFORM_BUILD_COMMAND}" )
	ENDIF( GENERATOR_MATCH_VISUAL_STUDIO )
	
	ExternalProject_Add( ${PROJECT_NAME}
		DEPENDS ${PROJECT_DEPENDS}
		PREFIX ${CMAKE_CURRENT_BINARY_DIR}
		#--Download step--------------
		URL ${PROJECT_BASE}/${PROJECT_TGZ}
		URL_MD5 ${PROJECT_MD5_CHECKSUM}
		#--Update/Patch step----------
		#PATCH_COMMAND ${CMISS_PATCH_EXECUTABLE} -p1 -i
		#	${PROJECT_BASE}/${PROJECT_PATCH_FILE}
		${PATCH_COMMAND_STRING}
		#--Configure step-------------
		#CMAKE_ARGS ${PROJECT_CMAKE_ARGS}
		${CONFIGURE_ARGS} ${PROJECT_CONFIGURE_ARGS}
		#--Build step-----------------
		BUILD_COMMAND ${LOCAL_PLATFORM_BUILD_COMMAND}
		#--Install step---------------
		INSTALL_COMMAND ${LOCAL_PLATFORM_INSTALL_COMMAND} )
		
	UNSET( LOCAL_PLATFORM_BUILD_COMMAND )
	UNSET( LOCAL_PLATFORM_INSTALL_COMMAND )

ENDMACRO( ADD_EXTERNAL_PROJECT PROJECT_NAME PROJECT_DEPENDS
	PROJECT_BASE PROJECT_DEST PROJECT_TGZ PROJECT_MD5_CHECKSUM PROJECT_PATCH_FILE PROJECT_CMAKE_FILE CONFIGURE_ARGS )